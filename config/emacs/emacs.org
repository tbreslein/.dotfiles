* My literate emacs config

** TODO

- org mode
- more config for compilation mode
- language modes
- flymake, flymake-diagnostic-at-point
- apheleia
- eglot
- yasnippet
- eglot-booster
- treesitter
- nerd-icons
- maybe doom-modeline? maybe diminish and a custom mode line?
- dape
- eww
- mu4e for emails
- elfeed for rss
- https://github.com/MiniApollo/kickstart.emacs
- https://github.com/Bugswriter/.emacs.d

** package management

I tried out straight and elpaca, but at the of the day just the built-in does
everything I need

#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;;(setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (use-package compile-angel
    :ensure t
    :demand t
    :custom
    (compile-angel-verbose nil)
    :config
    (compile-angel-on-load-mode)
    (add-hook 'emacs-lisp-mode-hook
              #'compile-angel-on-save-local-mode))
#+END_SRC

** org mode

#+BEGIN_SRC
  ;; (use-package org :ensure (:wait t))
#+END_SRC

** basic emacs config

*** custom and backup files

emacs puts "custom config" (i.e. configuration chosen at runtime in contrast to
being read from a config file) into the init.el file, unless you tell it to use a
specific custom file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (ignore-errors (load custom-file)) ;; It may not yet exist.
#+END_SRC

also, whenever you're editing, emacs creates backup and autosave files... and I
don't like it

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq backup-directory-alist '(("." . "~/.local/emacs/backups")))
  (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/autosave/" t)))

  ;; in case I change my mind and want to use backups...
  ;; (setq delete-old-versions t)
  ;; (setq kept-old-versions 10)
  ;; (setq vc-make-backup-files t)
  ;; (setq version-control t)
#+END_SRC

*** performance

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  (setq read-process-output-max (* 1024 1024 4))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+END_SRC

*** visuals

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (global-hl-line-mode 1)
  (fringe-mode -1)
  (setq enable-recursive-minibuffers t)
  (global-subword-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq initial-scratch-message "")

  (setq ring-bell-function #'ignore)
  (setq inhibit-startup-screen t)

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'visual)
  (setq display-line-numbers-width-start t)
  (setopt display-fill-column-indicator-column 80)
  (global-display-fill-column-indicator-mode +1)
  (blink-cursor-mode -1)
  (setq auto-window-vscroll nil)

  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (set-face-attribute 'default nil :family "Hack Nerd Font" :height (if (eq system-type 'darwin) 180 110))
  (set-frame-parameter nil 'alpha 96)
  (defun skip-these-buffers (_window buffer _bury-or-kill)
    "Function for `switch-to-prev-buffer-skip'."
    (string-match "\\*[^*]+\\*" (buffer-name buffer)))
  (setq switch-to-prev-buffer-skip 'skip-these-buffers
        ring-bell-function #'ignore)

  ;; (use-package gruber-darker-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'gruber-darker t))

  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode))

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    ;; (load-theme 'doom-nord-aurora t)
    (load-theme 'doom-gruvbox t)
    ;; (load-theme 'doom-gruvbox-light t)
   (doom-themes-org-config))
#+END_SRC

** evil mode

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure nil :config (which-key-mode))
  (use-package undo-fu :ensure t)
  (use-package drag-stuff :ensure t)
  (use-package general :ensure t)

  (use-package evil
    :ensure t
    :demand t
    :after (undo-fu drag-stuff general)
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-u-scroll t)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-insert-state-cursor 'box)
    (setq evil-want-Y-yank-to-eol t)
    (evil-set-leader nil (kbd "SPC"))
    (general-def 'normal
      "C-d" (lambda () (interactive) (evil-scroll-down 0) (recenter))
      "C-u" (lambda () (interactive) (evil-scroll-up 0) (recenter))
      "n" (lambda () (interactive) (evil-search-next) (recenter))
      "N" (lambda () (interactive) (evil-search-previous) (recenter))
      "M-m" 'compile
      "<leader>gg" 'magit
      "]c" 'next-error
      "[c" 'previous-error)
    (general-def 'normal
      "<escape>" 'keyboard-escape-quit
      "C-=" 'text-scale-increase
      "C--" 'text-scale-decrease
      "C-h" 'evil-window-left
      "C-j" 'evil-window-down
      "C-k" 'evil-window-up
      "C-l" 'evil-window-right)
    (general-def 'normal
      :prefix "<leader>s"
      "j" 'evil-window-new
      "l" 'evil-window-vnew)
    (general-def 'visual
      "C-d" (lambda () (interactive) (evil-scroll-down 0) (recenter))
      "C-u" (lambda () (interactive) (evil-scroll-up 0) (recenter))
      "J" (lambda () (interactive) (drag-stuff-down 1) (evil-indent))
      "K" (lambda () (interactive) (drag-stuff-up 1) (evil-indent)))

    (evil-mode))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-define-operator +evil-join-a (beg end)
      "Join the selected lines.
  This advice improves on `evil-join' by removing comment delimiters when joining
  commented lines, by using `fill-region-as-paragraph'.
  From https://github.com/emacs-evil/evil/issues/606"
      :motion evil-line
      (let* ((count (count-lines beg end))
  	   (count (if (> count 1) (1- count) count))
  	   (fixup-mark (make-marker)))
        (dotimes (var count)
  	(if (and (bolp) (eolp))
  	    (join-line 1)
  	  (let* ((end (line-beginning-position 3))
  		 (fill-column (1+ (- end beg))))
  	    (set-marker fixup-mark (line-end-position))
  	    (fill-region-as-paragraph beg end nil t)
  	    (goto-char fixup-mark)
  	    (fixup-whitespace))))
        (set-marker fixup-mark nil)))
    (evil-global-set-key 'normal (kbd "J") '+evil-join-a)
    (evil-commentary-mode))

  (use-package evil-numbers
    :ensure t
    :after evil
    :config
    (general-def 'normal
      "C-a" 'evil-numbers/inc-at-pt
      "C-x" 'evil-numbers/dec-at-pt))

  (use-package avy
    :ensure t
    :after evil
    :config
    (evil-global-set-key 'normal (kbd "s") 'avy-goto-char-2))
#+END_SRC

** terminal

I'm using vterm. Even if it's not the fastest, it's the one that does not produce
weird graphical artifacts

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :custom
    (vterm-max-scrollback 20000)
    (vterm-timer-delay 0.01)
    :config
    (general-def 'normal
      :prefix "<leader>t"
      "t" 'vterm
      "j" (lambda () (interactive) (evil-window-new 20 "") (vterm))
      "l" (lambda () (interactive) (evil-window-vnew nil "") (vterm))))
#+END_SRC

** editing and navigation

*** basic emacs settings

#+BEGIN_SRC emacs-lisp
  ;; (electric-indent-mode -1)
  (save-place-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (global-auto-revert-mode 1)
  (indent-tabs-mode -1)
  (modify-coding-system-alist 'file "" 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (setq tab-always-indent 'complete)
  (setq scroll-step 1)
  (setq scroll-margin 5)
  (setq scroll-conservatively 10000)

  ;; auto fill breaks lines when they go past the color column, and the
  ;; comment-auto-fill-only-comments option makes that only work in comments
  (auto-fill-mode 1)
  (setq comment-auto-fill-only-comments 1)
#+END_SRC

*** completion

#+BEGIN_SRC emacs-lisp
  (use-package fussy
    :ensure t
    :config
    (setq fussy-use-cache t)
    (fussy-eglot-setup)
    (fussy-setup))

  (use-package vertico
    :ensure t
    :custom
    (vertico-count 10)
    (vertico-resize nil)
    (vertico-cycle t)
    (completion-styles '(flex basic))
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt))
    :init
    (vertico-mode 1)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-h") 'vertico-next-group)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-j") 'vertico-next)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-k") 'vertico-previous)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-;") 'vertico-previous-group)
    )

  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  (use-package marginalia
    :ensure t
    :after vertico
    :config
    (marginalia-mode 1))

  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-echo-delay 0.1)
    (corfu-preview-current nil)
    (corfu-auto-delay 0)
    (corfu-popupinfo-delay '(0.1 . 0.1))
    :config
    (general-def 'insert
      "C-j" 'corfu-next
      "C-k" 'corfu-previous
      "C-l" 'corfu-insert
      "C-h" 'corfu-insert-separator)
    (define-key corfu-map (kbd "RET") nil)
    ;; For cache functionality.
    (advice-add 'corfu--capf-wrapper :before 'fussy-wipe-cache)

    (add-hook 'corfu-mode-hook
  	    (lambda ()
  		(setq-local fussy-max-candidate-limit 5000
  			    fussy-default-regex-fn 'fussy-pattern-first-letter
  			    fussy-prefer-prefix nil)))
    :init
    (global-corfu-mode))

  (use-package cape
    :ensure t
    :after corfu
    :init
    (add-to-list 'completion-at-point-functions #'cape-file))
#+END_SRC

*** projectile + perspective

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "C-C M-p"))
    :init
    (persp-mode))

  (use-package rg :ensure t)

  (use-package projectile
    :ensure t
    :custom
    (projectile-project-search-path
     '(("~/code" . 1)
       ("~/.dotfiles" . 0)
       ("~/notes" . 0)
       ("~/work" . 1)
       ("~/work/repos" . 1)))
    (projectile-require-project-root nil)
    (projectile-sort-order 'recentf)
    :config
    (defcustom projectile-project-root-functions
      '(projectile-root-local
        projectile-root-marked
        projectile-root-top-down
        projectile-root-top-down-recurring
        projectile-root-bottom-up)
      "A list of functions for finding project roots."
      :group 'projectile
      :type '(repeat function))
    (evil-global-set-key 'normal (kbd "<leader>f") 'projectile-command-map)
    (projectile-mode 1))

  (use-package persp-projectile :ensure t)
#+END_SRC

*** fix project-roots for eglot in monorepos

Eglot needs a more specific project-root find function to function in a monorepo,
because it uses `project.el` under the hood to find workspace root. That doesn't
really work in monorepos though, so this override fixes that at least for the
types of projects we have at work.

#+BEGIN_SRC emacs-lisp
  (defun project-root-override (dir)
    "Find DIR's project root by searching for a '.project.el' file.

    If this file exists, it marks the project root.  For convenient compatibility
    with Projectile, '.projectile' is also considered a project root marker.

    https://blog.jmthornton.net/p/emacs-project-override"
    (let ((root (or (locate-dominating-file dir ".project.el")
  		  (locate-dominating-file dir ".projectile")
  		  (locate-dominating-file dir "Cargo.toml")
  		  (locate-dominating-file dir "setup.py")
  		  (locate-dominating-file dir "requirements.txt")
  		  (locate-dominating-file dir "pyproject.toml")))
  	(backend (ignore-errors (vc-responsible-backend dir))))
      (when root (list 'vc backend root))))

  ;; Note that we cannot use :hook here because `project-find-functions' doesn't
  ;; end in "-hook", and we can't use this in :init because it won't be defined
  ;; yet.
  (use-package project
    :ensure t
    :config
    (add-hook 'project-find-functions #'project-root-override))
#+END_SRC

** system stuff

*** direnv, path-from-shell

ensure that emacs sees the same path as the login shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
      (add-to-list 'exec-path-from-shell-variables var))
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

automatically load envrc

#+BEGIN_SRC emacs-lisp
  (use-package envrc
    :ensure t
    :custom
    (envrc-show-summary-in-minibuffer nil)
    :hook (after-init . envrc-global-mode))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package transient :ensure t)
  (use-package magit :ensure t)
  (use-package hl-todo :ensure t :config (global-hl-todo-mode 1))
  (use-package magit-todos :ensure t :after '(magit hl-todo) :config (magit-todos-mode 1))
#+END_SRC

** compile

This is honestly kind of the killer feature for me when it comes to emacs.
Whether it's running actual builders, or a linter, or ripgrep... it's amazing.

It runs these things in a subprocess without any issues, the results are easily
parsed and you can jump to errors / grep matches or whatever easily.

#+BEGIN_SRC emacs-lisp
  (use-package compile
    :ensure nil
    :config
    (setq compilation-scroll-output t))
#+END_SRC

** language modes

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :ensure t)
  (use-package nix-mode :ensure t :mode "\\.nix\\'")
  (use-package go-mode :ensure :after eglot t :mode "\\.go\\'")
  (use-package zig-mode :ensure t :mode "\\.zig\\'")
  (use-package tuareg :ensure t)
  (use-package rust-mode :ensure t :mode "\\.rs\\'" :custom (rust-mode-treesitter-derive t))
  (use-package cargo :ensure t :hook (rust-ts-mode . cargo-minor-mode))
#+END_SRC

** formatting

#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :ensure t
    :config
    (setf (alist-get 'black apheleia-formatters)
          '("poetry" "run" "black" "-"))
    (setf (alist-get 'nixpkgs-fmt apheleia-formatters)
          '("nixpkgs-fmt"))
    (setf (alist-get 'nix-mode apheleia-mode-alist)
          '(nixpkgs-fmt))
    (apheleia-global-mode +1))
#+END_SRC

** flymake

#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :ensure nil
    :after evil
    :config
    (add-hook 'emacs-lisp-mode-hook 'flymake-mode)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "]d") 'flymake-goto-next-error)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "[d") 'flymake-goto-prev-error)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "gq") 'flymake-show-project-diagnostics)
    (flymake-mode 1))

  (use-package flymake-diagnostic-at-point
    :ensure t
    :after flymake
    :config
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
#+END_SRC

** eglot

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure nil
    :hook
    ((python-ts-mode
      rust-ts-mode
      zig-ts-mode
      go-ts-mode
      tuareg-mode
      ) . eglot-ensure)
    :config
    (setq eglot-ignored-server-capabilities '(:inlayHintProvider :colorProvider))
    ;; (add-to-list 'eglot-server-programs
    ;;              '((python-mode python-ts-mode)
    ;; 		 "basedpyright-langserver" "--stdio"))
    (eglot-inlay-hints-mode -1))

  (use-package yasnippet :ensure t :config (yas-global-mode 1))

  ;; (straight-use-package
  ;;  '(eglot-booster :type git :host github :repo "jdtsmith/eglot-booster"))

  (use-package eglot-booster
    :ensure t
    :vc (:url "https://github.com/jdtsmith/eglot-booster")
    :after eglot
    :config (eglot-booster-mode))
#+END_SRC

** editorconfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

** treesitter

#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
      (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml" "master" "grammars/ocaml/src")
      (cmake "https://github.com/uyha/tree-sitter-cmake")
      (css "https://github.com/tree-sitter/tree-sitter-css")
      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
      (go "https://github.com/tree-sitter/tree-sitter-go")
      (html "https://github.com/tree-sitter/tree-sitter-html")
      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
      (json "https://github.com/tree-sitter/tree-sitter-json")
      (make "https://github.com/alemuller/tree-sitter-make")
      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
      (python "https://github.com/tree-sitter/tree-sitter-python")
      (toml "https://github.com/tree-sitter/tree-sitter-toml")
      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
      (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (add-to-list 'treesit-auto-langs 'ocaml)
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+END_SRC

** modeline

#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-font-family "Fira Code Nerd Font")
    (nerd-icons-scale-factor 1.2))

  (use-package doom-modeline
    :ensure t
    :defer t
    :init
    (doom-modeline-mode 1)
    (setq find-file-visit-truename t)
    :config
    (setq doom-modeline-enable-word-count nil)
    (setq doom-modeline-height 15)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-lsp-icon t)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-vcs-max-length 50)
    (setq doom-modeline-env-version nil)
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-buffer-file-name-style 'relative-from-project))
#+END_SRC
