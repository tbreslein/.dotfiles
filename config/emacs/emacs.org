* My literate emacs config

** TODO
- dap
- org mode
- meow
- eww
- mu4e for emails
- elfeed for rss
- https://github.com/MiniApollo/kickstart.emacs

** package management: elpaca

I'm trying out elpaca. It's supposed to be an evolution of `straight.el` of sorts,
but the neat thing is that it runs async and is thus way faster.

#+BEGIN_SRC emacs-lisp
    (defvar elpaca-installer-version 0.10)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil :depth 1 :inherit ignore
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (<= emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                      ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                      ,@(when-let* ((depth (plist-get order :depth)))
                                                          (list (format "--depth=%d" depth) "--no-single-branch"))
                                                      ,(plist-get order :repo) ,repo))))
                      ((zerop (call-process "git" nil buffer t "checkout"
                                            (or (plist-get order :ref) "--"))))
                      (emacs (concat invocation-directory invocation-name))
                      ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                            "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                      ((require 'elpaca))
                      ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ;;("gnu" . "https://elpa.gnu.org/packages/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
#+END_SRC

** org mode

#+BEGIN_SRC emacs-lisp
  ;; (use-package org :ensure (:wait t))
#+END_SRC

** basic emacs config

*** custom and backup files

emacs puts "custom config" (i.e. configuration chosen at runtime in contrast to
being read from a config file) into the init.el file, unless you tell it to use a
specific custom file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (ignore-errors (load custom-file)) ;; It may not yet exist.
#+END_SRC

also, whenever you're editing, emacs creates backup and autosave files... and I
don't like it

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq backup-directory-alist '(("." . "~/.local/emacs/backups")))
  (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/autosave/" t)))

  ;; in case I change my mind and want to use backups...
  ;; (setq delete-old-versions t)
  ;; (setq kept-old-versions 10)
  ;; (setq vc-make-backup-files t)
  ;; (setq version-control t)
#+END_SRC

*** performance

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  (setq read-process-output-max (* 1024 1024 4))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+END_SRC

*** visuals

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (global-hl-line-mode 1)
  (setq enable-recursive-minibuffers t)
  ;; (setq frame-title-format nil)

  (setq ring-bell-function #'ignore)
  (setq inhibit-startup-screen t)

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'visual)
  (setq display-line-numbers-width-start t)
  (setopt display-fill-column-indicator-column 80)
  (global-display-fill-column-indicator-mode +1)
  (blink-cursor-mode -1)
  (setq auto-window-vscroll nil)

  (setq use-dialog-box nil)
  (set-face-attribute 'default nil :family "Hack Nerd Font" :height (if (eq system-type 'darwin) 170 110))
  (set-frame-parameter nil 'alpha 96)
  (defun skip-these-buffers (_window buffer _bury-or-kill)
    "Function for `switch-to-prev-buffer-skip'."
    (string-match "\\*[^*]+\\*" (buffer-name buffer)))
  (setq switch-to-prev-buffer-skip 'skip-these-buffers
        ring-bell-function #'ignore)

  (use-package volatile-highlights :ensure t :config (volatile-highlights-mode t))

  ;; (use-package gruber-darker-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'gruber-darker t))

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-nord-aurora t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+END_SRC

*** editing

#+BEGIN_SRC emacs-lisp
  ;; (electric-indent-mode -1)
  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (indent-tabs-mode -1)
  (modify-coding-system-alist 'file "" 'utf-8)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (setq tab-always-indent 'complete)
  (setq scroll-step 1)
  (setq scroll-margin 5)
  (setq scroll-conservatively 10000)
#+END_SRC

** system stuff

*** direnv, path-from-shell

ensure that emacs sees the same path as the login shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
      (add-to-list 'exec-path-from-shell-variables var))
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

automatically load envrc

#+BEGIN_SRC emacs-lisp
  (use-package envrc
    :ensure t
    :custom
    (envrc-show-summary-in-minibuffer nil)
    :hook (elpaca-after-init . envrc-global-mode))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package transient :ensure t)
  (use-package magit :ensure t)
  (use-package hl-todo :ensure t :config (global-hl-todo-mode 1))
  (use-package magit-todos :ensure t :after magit :config (magit-todos-mode 1))
#+END_SRC

** keybinds

I should configure these through `general.el`

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC


*** evil mode

#+BEGIN_SRC emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
    (use-package meow
      :ensure t
      :config
      (meow-setup)
      (meow-global-mode 1))

    ;; (use-package undo-fu :ensure t)
    ;; (use-package drag-stuff :ensure t)
    ;; (use-package evil
    ;;   :ensure t
    ;;   :demand t
    ;;   :after undo-fu
    ;;   :init
    ;;   (setq evil-want-keybinding nil)
    ;;   (setq evil-undo-system 'undo-fu)
    ;;   :config
    ;;   (setq evil-want-C-d-scroll t)
    ;;   (setq evil-want-C-u-scroll t)
    ;;   (setq evil-split-window-below t)
    ;;   (setq evil-vsplit-window-right t)
    ;;   (setq evil-insert-state-cursor 'box)
    ;;   (setq evil-want-Y-yank-to-eol t)
    ;;   (evil-set-leader nil (kbd "SPC"))
    ;;   (evil-global-set-key 'normal (kbd "C-d") (lambda () (interactive) (evil-scroll-down 0) (recenter)))
    ;;   (evil-global-set-key 'normal (kbd "C-u") (lambda () (interactive) (evil-scroll-up 0) (recenter)))
    ;;   (evil-global-set-key 'visual (kbd "C-d") (lambda () (interactive) (evil-scroll-down 0) (recenter)))
    ;;   (evil-global-set-key 'visual (kbd "C-u") (lambda () (interactive) (evil-scroll-up 0) (recenter)))
    ;;   (evil-global-set-key 'normal (kbd "n") (lambda () (interactive) (evil-search-next) (recenter)))
    ;;   (evil-global-set-key 'normal (kbd "N") (lambda () (interactive) (evil-search-previous) (recenter)))
    ;;   (evil-global-set-key 'visual (kbd "J") (lambda () (interactive) (drag-stuff-down 1) (evil-indent)))
    ;;   (evil-global-set-key 'visual (kbd "K") (lambda () (interactive) (drag-stuff-up 1) (evil-indent)))
    ;;   (evil-global-set-key 'motion (kbd "j") 'evil-next-visual-line)
    ;;   (evil-global-set-key 'motion (kbd "k") 'evil-previous-visual-line)
    ;;   (evil-global-set-key 'normal (kbd "M-m") 'compile)
    ;;   (evil-global-set-key 'normal (kbd "C-h") 'evil-window-left)
    ;;   (evil-global-set-key 'normal (kbd "C-j") 'evil-window-down)
    ;;   (evil-global-set-key 'normal (kbd "C-k") 'evil-window-up)
    ;;   (evil-global-set-key 'normal (kbd "C-l") 'evil-window-right)
    ;;   (evil-global-set-key 'normal (kbd "<leader>gg") 'magit)
    ;;   (evil-global-set-key 'normal (kbd "<leader>sj") 'evil-window-new)
    ;;   (evil-global-set-key 'normal (kbd "<leader>sl") 'evil-window-vnew)
    ;;   (evil-global-set-key 'normal (kbd "<leader>tj") (lambda () (interactive) (evil-window-new 20 "") (vterm)))
    ;;   (evil-global-set-key 'normal (kbd "<leader>tl") (lambda () (interactive) (evil-window-vnew nil "") (vterm)))
    ;;   (evil-mode))

    ;; (use-package evil-collection
    ;;   :ensure t
    ;;   :after evil
    ;;   :config
    ;;   (evil-collection-init))

    ;; (use-package evil-commentary
    ;;   :ensure t
    ;;   :after evil
    ;;   :config
    ;;   (evil-define-operator +evil-join-a (beg end)
    ;;     "Join the selected lines.
    ;; This advice improves on `evil-join' by removing comment delimiters when joining
    ;; commented lines, by using `fill-region-as-paragraph'.
    ;; From https://github.com/emacs-evil/evil/issues/606"
    ;;     :motion evil-line
    ;;     (let* ((count (count-lines beg end))
    ;; 	   (count (if (> count 1) (1- count) count))
    ;; 	   (fixup-mark (make-marker)))
    ;;       (dotimes (var count)
    ;; 	(if (and (bolp) (eolp))
    ;; 	    (join-line 1)
    ;; 	  (let* ((end (line-beginning-position 3))
    ;; 		 (fill-column (1+ (- end beg))))
    ;; 	    (set-marker fixup-mark (line-end-position))
    ;; 	    (fill-region-as-paragraph beg end nil t)
    ;; 	    (goto-char fixup-mark)
    ;; 	    (fixup-whitespace))))
    ;;       (set-marker fixup-mark nil)))
    ;;   (evil-global-set-key 'normal (kbd "J") '+evil-join-a)
    ;;   (evil-commentary-mode))
#+END_SRC

** projects and compile

#+BEGIN_SRC emacs-lisp
  (use-package compile
    :ensure nil
    :config
    (setq compilation-scroll-output t))

  ;; NAVIGATION
  (use-package perspective
    :ensure t
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode))

  ;; ;; EGLOT SOMEHOW NEEDS THIS TO CORRECTLY DETERMINE THE PROJECT ROOT
  ;; ;; This SHOULD take care of the problem that project-root-override tries to solve,
  ;; ;; but for some reason it does not work. I have no idea why, but I don't seem to
  ;; ;; be the only one.
  ;; (setq project-vc-extra-root-markers
  ;;       '("Cargo.toml" "pyproject.toml"))

  (defun project-root-override (dir)
    "Find DIR's project root by searching for a '.project.el' file.

    If this file exists, it marks the project root.  For convenient compatibility
    with Projectile, '.projectile' is also considered a project root marker.

    https://blog.jmthornton.net/p/emacs-project-override"
    (let ((root (or (locate-dominating-file dir ".project.el")
  		  (locate-dominating-file dir ".projectile")
  		  (locate-dominating-file dir "Cargo.toml")
  		  (locate-dominating-file dir "setup.py")
  		  (locate-dominating-file dir "requirements.txt")
  		  (locate-dominating-file dir "pyproject.toml")))
  	(backend (ignore-errors (vc-responsible-backend dir))))
      (when root (list 'vc backend root))))

  ;; Note that we cannot use :hook here because `project-find-functions' doesn't
  ;; end in "-hook", and we can't use this in :init because it won't be defined
  ;; yet.
  (use-package project
    :ensure t
    :config
    (add-hook 'project-find-functions #'project-root-override))

  (use-package persp-projectile :ensure t)

  (use-package rg :ensure t)

  (use-package projectile
    :ensure t
    :custom
    (projectile-project-search-path
     '(("~/code" . 1)
       ("~/.dotfiles" . 0)
       ("~/notes" . 0)
       ("~/work" . 1)
       ("~/work/repos" . 1)))
    (projectile-require-project-root nil)
    (projectile-sort-order 'recentf)
    :config
    (defcustom projectile-project-root-functions
      '(projectile-root-local
        projectile-root-marked
        projectile-root-top-down
        projectile-root-top-down-recurring
        projectile-root-bottom-up)
      "A list of functions for finding project roots."
      :group 'projectile
      :type '(repeat function))
    ;; (evil-global-set-key 'normal (kbd "<leader>f") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

** terminal

I'm using vterm. Even if it's not the fastest, it's the one that does not produce
weird graphical artifacts

#+BEGIN_SRC emacs-lisp
    (use-package vterm
      :ensure t
      :custom
      (vterm-max-scrollback 20000)
      (vterm-timer-delay 0.01)
      :config
      ;(evil-global-set-key 'normal (kbd "<leader>tt") 'vterm)
      )
#+END_SRC

** completion

#+BEGIN_SRC emacs-lisp
    (when (< emacs-major-version 31)
      (advice-add #'completing-read-multiple :filter-args
                  (lambda (args)
                    (cons (format "[CRM%s] %s"
                                  (string-replace "[ \t]*" "" crm-separator)
                                  (car args))
                          (cdr args)))))

    ;; ;; (setq text-mode-ispell-word-completion nil) ;; use cape-dict instead

    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p)

    ;; ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt))

    (use-package orderless
      :ensure t
      :after evil
      :custom
      (completion-styles '(orderless-flex basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))

    (use-package vertico
      :ensure t
      :after orderless
      :hook (elpaca-after-init . vertico-mode)
      :custom
      (vertico-count 10)
      (vertico-resize nil)
      (vertico-cycle t)
      (completion-styles '(flex basic))
      ;:config
      ;(evil-define-key 'normal 'vertico-map (kbd "M-h") 'vertico-next-group)
      ;(evil-define-key 'normal 'vertico-map (kbd "M-j") 'vertico-next)
      ;(evil-define-key 'normal 'vertico-map (kbd "M-k") 'vertico-previous)
      ;(evil-define-key 'normal 'vertico-map (kbd "M-;") 'vertico-previous-group)
      )

    (use-package marginalia
      :ensure t
      :after vertico
      :config
      (marginalia-mode 1))

    (use-package corfu
      :ensure t
      :custom
      (corfu-cycle t)
      (corfu-auto t)
      (corfu-auto-prefix 1)
      (corfu-echo-delay 0.1)
      (corfu-preview-current nil)
      (corfu-auto-delay 0)
      (corfu-popupinfo-delay '(0.1 . 0.1))

      ;:config
      ;(evil-define-key 'insert 'corfu-map (kbd "C-j") 'corfu-next)
      ;(evil-define-key 'insert 'corfu-map (kbd "C-k") 'corfu-previous)
      ;(evil-define-key 'insert 'corfu-map (kbd "C-l") 'corfu-insert)
      ;(evil-define-key 'insert 'corfu-map (kbd "C-h") 'corfu-insert-separator)

      :init
      (global-corfu-mode))

    (use-package cape
      :ensure t
      :after corfu
      :init
      (add-to-list 'completion-at-point-functions #'cape-file))
#+END_SRC

** languages

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :ensure t)
  (use-package nix-mode :ensure t :mode "\\.nix\\'")
  (use-package go-mode :ensure :after eglot t :mode "\\.go\\'")
  (use-package zig-mode :ensure t :mode "\\.zig\\'")
  (use-package tuareg :ensure t)
  (use-package rust-mode :ensure t :mode "\\.rs\\'" :custom (rust-mode-treesitter-derive t))
  (use-package cargo :ensure t :hook (rust-ts-mode . cargo-minor-mode))
    ;; :config (evil-define-key 'normal 'cargo-mode-map (kbd "C-c") 'cargo-minor-mode-command-map))
#+END_SRC

** formatting ++ lsp

#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :ensure nil
    :after evil
    :config
    (add-hook 'emacs-lisp-mode-hook 'flymake-mode)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "]d") 'flymake-goto-next-error)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "[d") 'flymake-goto-prev-error)
    ;(evil-define-key 'normal 'flymake-mode-map (kbd "gq") 'flymake-show-project-diagnostics)
    (flymake-mode 1))

  (use-package flymake-diagnostic-at-point
    :ensure t
    :after flymake
    :config
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))

  (use-package apheleia
    :ensure t
    :config
    (setf (alist-get 'black apheleia-formatters)
          '("poetry" "run" "black" "-"))
    (setf (alist-get 'nixpkgs-fmt apheleia-formatters)
          '("nixpkgs-fmt"))
    (setf (alist-get 'nix-mode apheleia-mode-alist)
          '(nixpkgs-fmt))
    (apheleia-global-mode +1))

  (use-package eglot
    :ensure nil
    :hook
    ((python-ts-mode
      rust-ts-mode
      zig-ts-mode
      go-ts-mode
      tuareg-mode
      ) . eglot-ensure)
    :config
    (setq eglot-ignored-server-capabilities '(:inlayHintProvider :colorProvider))
    ;; (add-to-list 'eglot-server-programs
    ;;              '((python-mode python-ts-mode)
    ;; 		 "basedpyright-langserver" "--stdio"))
    (eglot-inlay-hints-mode -1))

  (use-package yasnippet :ensure t :config (yas-global-mode 1))

  ;; (straight-use-package
  ;;  '(eglot-booster :type git :host github :repo "jdtsmith/eglot-booster"))

  ;; (use-package eglot-booster
  ;;   ;; :vc (:url "https://github.com/jdtsmith/eglot-booster")
  ;;   :after eglot
  ;;   :config (eglot-booster-mode))
#+END_SRC

** treesitter

#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
        '((ocaml "https://github.com/tree-sitter/tree-sitter-ocaml" "master" "grammars/ocaml/src")
  	;; (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml" "master" "grammars/interface/src")
  	;; (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml" "master" "grammars/type/src")
  	(yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (add-to-list 'treesit-auto-langs 'ocaml)
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-font-family "Fira Code Nerd Font")
    (nerd-icons-scale-factor 1.2))

  (use-package doom-modeline
    :ensure t
    :defer t
    :init
    (doom-modeline-mode 1)
    (setq find-file-visit-truename t)
    :config
    (setq doom-modeline-enable-word-count nil)
    (setq doom-modeline-height 15)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-lsp-icon t)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-vcs-max-length 50)
    (setq doom-modeline-env-version nil)
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-buffer-file-name-style 'relative-from-project))
#+END_SRC
