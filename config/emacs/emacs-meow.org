* My literate emacs config

** TODO

- org mode
- more config for compilation mode
- magit config
- rg, projectile, perspective and persp-projectile
- vterm
- fido
- fussy
- corfu
- cape (for cape-file completions)
- language modes
- flymake, flymake-diagnostic-at-point
- apheleia
- eglot
- yasnippet
- eglot-booster
- treesitter
- nerd-icons
- maybe doom-modeline? maybe diminish and a custom mode line?
- dape
- eww
- mu4e for emails
- elfeed for rss
- https://github.com/MiniApollo/kickstart.emacs
- https://github.com/Bugswriter/.emacs.d

** package management

I tried out straight and elpaca, but at the of the day just the built-in does
everything I need

#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;;(setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (use-package compile-angel
    :ensure t
    :demand t
    :custom
    (compile-angel-verbose nil)
    :config
    (compile-angel-on-load-mode)
    (add-hook 'emacs-lisp-mode-hook 
              #'compile-angel-on-save-local-mode)) 
#+END_SRC

** org mode

#+BEGIN_SRC
  ;; (use-package org :ensure (:wait t))
#+END_SRC

** basic emacs config

*** custom and backup files

emacs puts "custom config" (i.e. configuration chosen at runtime in contrast to
being read from a config file) into the init.el file, unless you tell it to use a
specific custom file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (ignore-errors (load custom-file)) ;; It may not yet exist.
#+END_SRC

also, whenever you're editing, emacs creates backup and autosave files... and I
don't like it

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq backup-directory-alist '(("." . "~/.local/emacs/backups")))
  (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/autosave/" t)))

  ;; in case I change my mind and want to use backups...
  ;; (setq delete-old-versions t)
  ;; (setq kept-old-versions 10)
  ;; (setq vc-make-backup-files t)
  ;; (setq version-control t)
#+END_SRC

*** performance

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  (setq read-process-output-max (* 1024 1024 4))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+END_SRC

*** visuals

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (global-hl-line-mode 1)
  (fringe-mode -1)
  (setq enable-recursive-minibuffers t)
  (global-subword-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq initial-scratch-message "")

  (setq ring-bell-function #'ignore)
  (setq inhibit-startup-screen t)

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'visual)
  (setq display-line-numbers-width-start t)
  (setopt display-fill-column-indicator-column 80)
  (global-display-fill-column-indicator-mode +1)
  (blink-cursor-mode -1)
  (setq auto-window-vscroll nil)

  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (set-face-attribute 'default nil :family "Hack Nerd Font" :height (if (eq system-type 'darwin) 200 110))
  (set-frame-parameter nil 'alpha 96)
  (defun skip-these-buffers (_window buffer _bury-or-kill)
    "Function for `switch-to-prev-buffer-skip'."
    (string-match "\\*[^*]+\\*" (buffer-name buffer)))
  (setq switch-to-prev-buffer-skip 'skip-these-buffers
        ring-bell-function #'ignore)

  ;; (use-package gruber-darker-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'gruber-darker t))

  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode))

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    ;; (load-theme 'doom-nord-aurora t)
    ;; (load-theme 'doom-gruvbox t)		
    (load-theme 'doom-gruvbox-light t)
    (doom-themes-org-config))
#+END_SRC


** completion

#+BEGIN_SRC emacs-lisp
  ;; try replacing this with fido-mode or fido-vertical-mode
  (use-package vertico
    :ensure t
    :custom
    (vertico-count 10)
    (vertico-resize nil)
    (vertico-cycle t)
    (completion-styles '(flex basic))
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt))
    :init
    (vertico-mode 1)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-h") 'vertico-next-group)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-j") 'vertico-next)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-k") 'vertico-previous)
    ;(evil-define-key 'normal 'vertico-map (kbd "M-;") 'vertico-previous-group)
    )

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :ensure t
    :after vertico
    :config
    (marginalia-mode 1))

  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-echo-delay 0.1)
    (corfu-preview-current nil)
    (corfu-auto-delay 0)
    (corfu-popupinfo-delay '(0.1 . 0.1))

    ;:config
    ;(evil-define-key 'insert 'corfu-map (kbd "C-j") 'corfu-next)
    ;(evil-define-key 'insert 'corfu-map (kbd "C-k") 'corfu-previous)
    ;(evil-define-key 'insert 'corfu-map (kbd "C-l") 'corfu-insert)
    ;(evil-define-key 'insert 'corfu-map (kbd "C-h") 'corfu-insert-separator)

    :init
    (global-corfu-mode))

  (use-package cape
    :ensure t
    :after corfu
    :init
    (add-to-list 'completion-at-point-functions #'cape-file))
#+END_SRC

** editing and navigation

*** basic emacs settings

#+BEGIN_SRC emacs-lisp
  ;; (electric-indent-mode -1)
  (save-place-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (global-auto-revert-mode 1)
  (indent-tabs-mode -1)
  (modify-coding-system-alist 'file "" 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (setq tab-always-indent 'complete)
  (setq scroll-step 1)
  (setq scroll-margin 5)
  (setq scroll-conservatively 10000)

  ;; auto fill breaks lines when they go past the color column, and the
  ;; comment-auto-fill-only-comments option makes that only work in comments
  (auto-fill-mode 1)
  (setq comment-auto-fill-only-comments 1)
#+END_SRC

*** undo-fu

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu :ensure t)
#+END_SRC

*** avy

since meow lacks larger movement motions, this package not only gives me
something akin to flash.nvim, i can even use it for jumping to specific lines

#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)
#+END_SRC

*** projectile + perspective

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :bind
    ("C-x C-b" . persp-list-buffers)
    :init
    (persp-mode))

  (use-package rg :ensure t)

  (use-package projectile
    :ensure t
    :custom
    (projectile-project-search-path
     '(("~/code" . 1)
       ("~/.dotfiles" . 0)
       ("~/notes" . 0)
       ("~/work" . 1)
       ("~/work/repos" . 1)))
    (projectile-require-project-root nil)
    (projectile-sort-order 'recentf)
    :config
    (defcustom projectile-project-root-functions
      '(projectile-root-local
        projectile-root-marked
        projectile-root-top-down
        projectile-root-top-down-recurring
        projectile-root-bottom-up)
      "A list of functions for finding project roots."
      :group 'projectile
      :type '(repeat function))
    (global-set-key (kbd "C-c f") 'projectile-command-map)
    (projectile-mode 1))

  (use-package persp-projectile :ensure t)
#+END_SRC

*** fix project-roots for eglot in monorepos

Eglot needs a more specific project-root find function to function in a monorepo,
because it uses `project.el` under the hood to find workspace root. That doesn't
really work in monorepos though, so this override fixes that at least for the
types of projects we have at work.

#+BEGIN_SRC emacs-lisp
  (defun project-root-override (dir)
    "Find DIR's project root by searching for a '.project.el' file.

    If this file exists, it marks the project root.  For convenient compatibility
    with Projectile, '.projectile' is also considered a project root marker.

    https://blog.jmthornton.net/p/emacs-project-override"
    (let ((root (or (locate-dominating-file dir ".project.el")
  		  (locate-dominating-file dir ".projectile")
  		  (locate-dominating-file dir "Cargo.toml")
  		  (locate-dominating-file dir "setup.py")
  		  (locate-dominating-file dir "requirements.txt")
  		  (locate-dominating-file dir "pyproject.toml")))
  	(backend (ignore-errors (vc-responsible-backend dir))))
      (when root (list 'vc backend root))))

  ;; Note that we cannot use :hook here because `project-find-functions' doesn't
  ;; end in "-hook", and we can't use this in :init because it won't be defined
  ;; yet.
  (use-package project
    :ensure t
    :config
    (add-hook 'project-find-functions #'project-root-override))
#+END_SRC

** system stuff

*** direnv, path-from-shell

ensure that emacs sees the same path as the login shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
      (add-to-list 'exec-path-from-shell-variables var))
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

automatically load envrc

#+BEGIN_SRC emacs-lisp
  (use-package envrc
    :ensure t
    :custom
    (envrc-show-summary-in-minibuffer nil)
    :hook (after-init . envrc-global-mode))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package transient :ensure t)
  (use-package magit :ensure t)
  (use-package hl-todo :ensure t :config (global-hl-todo-mode 1))
  (use-package magit-todos :ensure t :after '(magit hl-todo) :config (magit-todos-mode 1))
#+END_SRC

** compile

This is honestly kind of the killer feature for me when it comes to emacs.
Whether it's running actual builders, or a linter, or ripgrep... it's amazing.

It runs these things in a subprocess without any issues, the results are easily
parsed and you can jump to errors / grep matches or whatever easily.

#+BEGIN_SRC emacs-lisp
  (use-package compile
    :ensure nil
    :config
    (setq compilation-scroll-output t))
#+END_SRC

** keybinds

*** misc

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure nil :config (which-key-mode))

  (use-package my/keybinds/misc
    :ensure nil
    :bind
    ("C-=" . text-scale-increase)
    ("C--" . text-scale-decrease)
    ("<escape>" . keyboard-escape-quit))
#+END_SRC

*** navigation

emacs cannot natively scoll by half pages, so these functions implement this

#+BEGIN_SRC emacs-lisp
  (defun scroll-half-page-down ()
    "Scroll down half the page."
    (interactive)
    (scroll-up (/ (window-body-height) 2)))

  (defun scroll-half-page-up ()
    "Scroll up half the page."
    (interactive)
    (scroll-down (/ (window-body-height) 2)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package my/keybinds/navigation
    :ensure nil
    :bind
    ("C-v" . scroll-half-page-down)
    ("M-v" . scroll-half-page-up)
    ("C-c w J" . split-window-below)
    ("C-c w L" . split-window-right)
    ("C-c w h" . windmove-left)
    ("C-c w j" . windmove-down)
    ("C-c w k" . windmove-up)
    ("C-c w l" . windmove-right))
#+END_SRC

** meow

#+BEGIN_SRC emacs-lisp
  (use-package meow
    :ensure t
    :custom
    (meow-use-clipboard t)
    :config
    (defun meow-setup ()
     (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
     (meow-motion-define-key
      '("j" . meow-next)
      '("k" . meow-prev)
      '("<escape>" . ignore))
     (meow-leader-define-key
      ;; Use SPC (0-9) for digit arguments.
      '("1" . meow-digit-argument)
      '("2" . meow-digit-argument)
      '("3" . meow-digit-argument)
      '("4" . meow-digit-argument)
      '("5" . meow-digit-argument)
      '("6" . meow-digit-argument)
      '("7" . meow-digit-argument)
      '("8" . meow-digit-argument)
      '("9" . meow-digit-argument)
      '("0" . meow-digit-argument)
      '("/" . meow-keypad-describe-key)
      '("?" . meow-cheatsheet))
     (meow-normal-define-key
      '("0" . meow-expand-0)
      '("9" . meow-expand-9)
      '("8" . meow-expand-8)
      '("7" . meow-expand-7)
      '("6" . meow-expand-6)
      '("5" . meow-expand-5)
      '("4" . meow-expand-4)
      '("3" . meow-expand-3)
      '("2" . meow-expand-2)
      '("1" . meow-expand-1)
      '("-" . negative-argument)
      '(";" . meow-reverse)
      '("," . meow-inner-of-thing)
      '("." . meow-bounds-of-thing)
      '("[" . meow-beginning-of-thing)
      '("]" . meow-end-of-thing)
      '("a" . meow-append)
      '("A" . meow-open-below)
      '("b" . meow-back-word)
      '("B" . meow-back-symbol)
      '("c" . meow-change)
      '("d" . meow-delete)
      '("D" . meow-backward-delete)
      '("e" . meow-next-word)
      '("E" . meow-next-symbol)
      '("f" . meow-find)
      '("t" . meow-till)
      '("g" . meow-cancel-selection)
      '("G" . meow-grab)
      '("h" . meow-left)
      '("H" . meow-left-expand)
      '("i" . meow-insert)
      '("I" . meow-open-above)
      '("j" . meow-next)
      '("J" . meow-next-expand)
      '("k" . meow-prev)
      '("K" . meow-prev-expand)
      '("l" . meow-right)
      '("L" . meow-right-expand)
      '("m" . meow-join)
      '("n" . meow-search)
      '("o" . meow-block)
      '("O" . meow-to-block)
      '("p" . meow-yank)
      '("q" . meow-quit)
      '("Q" . meow-goto-line)
      '("r" . meow-replace)
      '("P" . meow-swap-grab)
      '("s" . meow-kill)
      '("S" . avy-goto-char-2)
      ;;'("u" . meow-undo)
      '("u" . undo-fu-only-undo)
      '("R" . undo-fu-only-redo)
      '("U" . meow-undo-in-selection)
      '("/" . meow-visit)
      '("w" . meow-mark-word)
      '("W" . meow-mark-symbol)
      '("x" . meow-line)
      '("X" . meow-goto-line)
      '("y" . meow-save)
      '("Y" . meow-sync-grab)
      '("z" . meow-pop-selection)
      '("'" . repeat)
      '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode 1))
#+END_SRC

